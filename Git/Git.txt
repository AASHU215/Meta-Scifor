Q1. What is Git and what is its purpose?

Ans: Git is distributed version of control system designed to handle everything from small to very large projects with speed and efficiency . 

Its primary purpose includes:

1. Tracking Changes
2. collaboration
3. Branching and Merging
4. Backup and Restore
5. Distributed and Development

Q2. How do you install Git on your computer?

Ans: Installing git on computer varies slightly depending on your operating system. Here are the steps for major operating systems:

1. Download the installer
2. run the installer
3. Follow the Setup Instructions
4. Finish the Installation
5. Verify the installation

Q3. What is a repository in Git?

Ans: In Git a repository is a storage space where your project's files, along with their complete history, are stored. It can be located on your local machine or hosted on a remote server. A Git repository is fundamental for tracking changes, and managing different versions of your project.

Key components of a Git Repository

1. Working Directory
2. Staging Area 
3. Repository(.git Directory)

Types of Git Repositories:

1. Local Repository
2. Remote Repository

Q4. How do you initialize a new Git repository?

Ans: Initializing a new git repository is a straight forward process. Here are the steps:

1. Open a terminal or command prompt
2. Navigate to your project directory
3. Initialize the repository
4. Verify the Repository

Q6. What is the difference between Git's staging area (index) and the working directory?

Ans: In Git , the working directory and the staging area (index) serve different purposes in the version control process. Here's detailed explanation of each:

Working Directory
The working directory is the directory on your local machine where you work with your project files. It reflects the current state of your project and is where you edit, create, delete, and move files as you develop

Key Point:

*Current state
*Modification
*Tracking Changes

Stages Area (Index):

The staging area, also known as index , is an intermediate area where you can prepare changes before committing them to the repository. It acts as a buffer between the working directory and the repository

Key Points:
*Pre-commit Area
*Selective Staging
*Consistency

Q7. How do you add files to the staging area in Git?

Ans: To add files to the staging area in Git, you use the git add command. The staging area is where you place changes you intend to commit, allowing you to review and organize changes before making a permanent snapshot in the repository's history.

Here are some common uses of the git add command:

1.Add a specific file
2.Add multiple specific files
3.Add all changes in the current directory (including subdirectories)
4.Add all changes in a specific directory
5.Add all changes (tracked and untracked files) to the staging area
6.Add all tracked files and changes in the current directory
7.Add all changes that match a specific pattern

Q8. How do you commit changes to the local Git repository?

Ans: To commit changes to the local Git repository, you use the git commit command. Committing in Git means creating a snapshot of the changes in your staging area, which then becomes part of the repository's history. Here’s how you can do it:

Basic Steps to Commit Changes:

1. Stage your changes
2. Commit the staged changes

Q9. What is the purpose of the git status command?

Ans: The git status command is an essential tool in Git that provides information about the current state of your working directory and the staging area. It helps you understand what changes have been made, which changes are staged for the next commit, and which changes are not yet staged or tracked by Git. Here are the key purposes and benefits of using git status:

Key Purposes of git status:

View Staged Changes:
git status shows you which changes have been added to the staging area and are ready to be committed. These are listed under the "Changes to be committed" section.

View Unstaged Changes:
It displays changes that have been made to tracked files but are not yet staged. These changes are listed under the "Changes not staged for commit" section.

Identify Untracked Files:
git status lists files in your working directory that are not being tracked by Git under the "Untracked files" section. These are new files that Git has not yet been instructed to track.

Q10. How do you create a new branch in Git?

Ans: Creating a new branch in Git allows you to work on different features or bug fixes separately from the main codebase. This way, you can develop and test changes independently without affecting the stable code. Here’s how you can create a new branch in Git:

Steps to Create a New Branch:
1.Check Out to the Branch You Want to Base the New Branch On
2.Create a New Branch
3.Switch to the New Branch

Q11. How do you switch between branches in Git?

Ans: Switching between branches in Git allows you to move your working directory and the HEAD pointer to a different branch. This can be done easily with a few commands. Here’s how you can switch between branches in Git:

1.Using git checkout
2.Switch to an existing branch

Q12. What is the purpose of the git?

Ans: The purpose of Git is to provide a distributed version control system (DVCS) for tracking changes in source code during software development. It offers a range of features that facilitate collaborative software development, including:

Version Control:
Git tracks changes to files and directories over time, allowing developers to revert to previous versions, compare changes, and maintain a history of all modifications made to a project.

Branching and Merging:
Git enables developers to create multiple branches of development, allowing them to work on features or bug fixes independently. Branches can be merged back into the main codebase once the changes are completed and tested.

Collaboration:
Git facilitates collaboration among developers working on the same project by providing mechanisms for sharing changes between team members. Developers can push and pull changes to and from a shared repository, enabling seamless collaboration even in distributed teams.

Workflow Flexibility:
Git supports various workflow strategies, such as centralized, feature branching, and Gitflow, allowing teams to adopt workflows that best suit their development practices and project requirements.

